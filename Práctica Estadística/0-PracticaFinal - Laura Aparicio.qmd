---
format: html
editor: visual
---

```{r}
library(ggplot2)
```

Cargar los datos en un dataframe llamado: airbnb

```{r}
airbnb<-read.csv('data//airbnb.csv',sep = ',', stringsAsFactors = T)
str(airbnb)
print(airbnb)
```

Mostrar las primeras 6 filas del dataframe

```{r}
head(airbnb)
```

Renombrar las columnas de la siguiente forma:

| Nombre original        | Nuevo nombre   |
|------------------------|----------------|
| Zipcode                | CodigoPostal   |
| Neighbourhood.Cleansed | Barrio         |
| Property.Type          | TipoPropiedad  |
| Room.Type              | TipoAlquiler   |
| Accommodates           | MaxOcupantes   |
| Bathrooms              | NumBanyos      |
| Bedrooms               | NumDormitorios |
| Beds                   | NumCamas       |
| Bed.Type               | TipoCama       |
| Amenities              | Comodidades    |
| Square.Feet            | PiesCuadrados  |
| Price                  | Precio         |
| Review.Scores.Rating   | Puntuacion     |

```{r}
colnames(airbnb) <- c("CodigoPostal","Barrio","TipoPropiedad","TipoAlquiler","MaxOcupantes","NumBanyos",
"NumDormitorios","NumCamas","TipoCama","Comodidades","PiesCuadrados","Precio","Puntuacion")

str(airbnb)
```

1.  Crea una nueva columna llamada MetrosCuadrados a partir de la columna PiesCuadrados.

Ayuda: 1 pie cuadrado son 0,092903 metros cuadrdados

```{r}
## COMPLETO

airbnb$MetrosCuadrados <- airbnb$PiesCuadrados * 0.092903
head(airbnb)
```

------------------------------------------------------------------------

2.  Miremos el código postal. Es una variable con entradas erroneas. 

```{r}
## COMPLETO

codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)
```

Hay valores como '','-' y '28' que deberían ser considerados como NA. Así mismo también debería ser NA todos los que no compiencen por 28, ya que estamos con códigos postales de Madrid

```{r}
## COMPLETO

airbnb$CodigoPostal <- gsub("\\D", "", airbnb$CodigoPostal)  # Eliminar caracteres no numéricos
airbnb$CodigoPostal[airbnb$CodigoPostal %in% c('', '-', '28')] <- NA
airbnb$CodigoPostal[!grepl("^28", airbnb$CodigoPostal)] <- NA

codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)
```

El código postal 28002, 28004 y 28051 tienen entradas repetidas. Por ejemplo las entradas 28002\n20882 deberían ir dentro de 28002

```{r}
## COMPLETO

airbnb$CodigoPostal[substr(airbnb$CodigoPostal, 1, 5) %in% c('20882', '28002')] <- '28002'
airbnb$CodigoPostal[substr(airbnb$CodigoPostal, 1, 5) %in% c('28051')] <- '28051'

codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)
```

El codigo 2804 debería ser 28004, 2805 deberia ser 28005 y 2815 junto con 2815 debería ser 28015

```{r}
## COMPLETO

airbnb$CodigoPostal[airbnb$CodigoPostal %in% c('2804')] <- '28004'
airbnb$CodigoPostal[airbnb$CodigoPostal %in% c('2805')] <- '28005'
airbnb$CodigoPostal[airbnb$CodigoPostal %in% c('2815')] <- '28015'

codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)
```

Limpia los datos de la columna Codigo Postal

```{r}
## COMPLETO

airbnb$CodigoPostal[airbnb$CodigoPostal %in% c('280013')] <- '28013'

codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)
```

------------------------------------------------------------------------

3.  Una vez limpios los datos ¿Cuales son los códigos postales que tenemos?

```{r}
## COMPLETO

codigos_postales_unicos <- unique(airbnb$CodigoPostal)
print(codigos_postales_unicos)
```

------------------------------------------------------------------------

4.  ¿Cuales son los 5 códigos postales con más entradas? ¿Y con menos? ¿Cuantas entradas tienen?

```{r}
## COMPLETO

frecuencia <- table(airbnb$CodigoPostal)
##frecuencia

##Top 5 de CP más frecuentes
top_5 <- head(sort(frecuencia, decreasing = TRUE),5)
top_5_names <- names(top_5)
top_5_frecuencia <- top_5
print(
  paste("Los 5 códigos postales con más entradas son", paste(top_5_names, collapse = ", "),  "Y tienen las siguientes frecuencias:", paste(top_5_frecuencia, collapse = ", "))
)

#Top 5 de CP menos frecuentes
bottom_5 <- head(sort(frecuencia, decreasing = FALSE),5)
bottom_5_names <- names(bottom_5)
bottom_5_frecuencia <- bottom_5
print(
  paste("Los 5 códigos postales con menos entradas son", paste(bottom_5_names, collapse = ", "),  "Y tienen las siguientes frecuencias:", paste(bottom_5_frecuencia, collapse = ", "))
)


```

------------------------------------------------------------------------

5.  ¿Cuales son los barrios que hay en el código postal 28012?

```{r}
## COMPLETO

barrios <- table(airbnb$Barrio)
barrios_names <- names(barrios)
barrios_28012 <- na.omit(barrios_names[airbnb$CodigoPostal == "28012"])
##barrios_28012
print(paste("Los barrios que hay en el CP 28012 son:", paste(barrios_28012,collapse = ", ")))

```

------------------------------------------------------------------------

6.  ¿Cuantas entradas hay en cada uno de esos barrios para el codigo postal 28012?

```{r}
## COMPLETO

frecuencia_barrios_28012 <- barrios[airbnb$CodigoPostal == "28012"]
frecuencia_barrios_28012 <- frecuencia_barrios_28012[!is.na(frecuencia_barrios_28012)]
frecuencia_barrios_28012
print(paste("La frecuencia de los barrios en el CP 28012 es la siguiente:",paste(frecuencia_barrios_28012,collapse = ", ")))
```

------------------------------------------------------------------------

7.  ¿Cuantos barrios hay en todo el dataset airbnb? ¿Cuales son?

```{r}
## COMPLETO

barrios_unicos <- unique(barrios_names)
cantidad_barrios <- length(barrios_unicos)
print(paste("El número de barrios únicos en el dataset es:", cantidad_barrios))
print(paste("Los barrios son los siguientes:",paste(barrios_unicos,collapse = ", ")))

```

------------------------------------------------------------------------

8.  ¿Cuales son los 5 barrios que tienen mayor número entradas?

```{r}
## COMPLETO

frecuencia_barrios <- table(airbnb$Barrio)
##frecuencia_barrios

top_5_barrios <- head(sort(frecuencia_barrios, decreasing = TRUE),5)
top_5_barrios

top_5_barrios_names <- names(top_5_barrios)
print(paste("Los 5 barrios con más entradas son:", paste(top_5_barrios_names, collapse = ", ")))
```

------------------------------------------------------------------------

9.  ¿Cuantos Tipos de Alquiler diferentes hay? ¿Cuales son? ¿Cuantas entradas en el dataframe hay por cada tipo?

Muestra el diagrama de cajas del precio para cada uno de los diferentes Tipos de Alquiler

```{r}
## COMPLETO 1/2

##str(airbnb)
##summary(airbnb$TipoAlquiler)

frecuencia_tipos_alquiler <- table(airbnb$TipoAlquiler)

print(paste("Hay", length(unique(airbnb$TipoAlquiler)),"tipos de alquiler. A continuación se muestra cuáles son y sus entradas:"))
print(frecuencia_tipos_alquiler)
```
```{r}
## COMPLETO 2/2

library(ggplot2)

ggplot(airbnb, aes(x = TipoAlquiler, y = Precio, color=TipoAlquiler)) +
  geom_boxplot() +
  xlab("Tipo de Alquiler") +
  ylab("Precio") + 
  ggtitle("Precio por Tipo de Alquiler")
```

------------------------------------------------------------------------

10. Cual es el precio medio de alquiler de cada uno, la diferencia que hay ¿es estadísticamente significativa? ¿Con que test lo comprobarías?

```{r}
## COMPLETO

airbnb$Precio <- as.numeric(as.character(airbnb$Precio))


entire_home <- airbnb$Precio[airbnb$TipoAlquiler == "Entire home/apt"]
private_room <- airbnb$Precio[airbnb$TipoAlquiler == "Private room"]


mean_entire_home <- mean(entire_home, na.rm = TRUE)
mean_private_room <- mean(private_room, na.rm = TRUE)


paste("Precio medio Entire home/apt:", mean_entire_home)
paste("Precio medio Private room:", mean_private_room)


shapiro_entire <- shapiro.test(entire_home[1:5000])
shapiro_entire
shapiro_private <- shapiro.test(private_room[1:5000])

shapiro_private

t_test <- t.test(entire_home, private_room, var.equal = TRUE)

print("Hay una diferencia significativa entre los precios medios de Entire home/apt y Private.room según el test t de Student:")
print(t_test)

```

------------------------------------------------------------------------

11. Filtra el dataframe cuyos tipo de alquiler sea 'Entire home/apt' y guardalo en un dataframe llamado *airbnb_entire*. Estas serán las entradas que tienen un alquiler del piso completo.

```{r}
## COMPLETO

airbnb_entire <- airbnb[airbnb$TipoAlquiler == "Entire home/apt", ]
str(airbnb_entire)
```

------------------------------------------------------------------------

12. ¿Cuales son los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler? Nota: Mirar solo en airbnb_entire. A partir de este punto y hasta que se diga lo contrario partiremos de airbnb_entire.

```{r}
## COMPLETO

frecuencia_barrios_entire <- table(airbnb_entire$Barrio)

top_5_barrios_entire <- head(sort(frecuencia_barrios, decreasing = TRUE), 5)
top_5_barrios_entire

top_5_barrios_entire_names <- names(top_5_barrios_entire)

print(paste("Los 5 barrios que tienen un mayor número de apartamentos enteros en alquiler son:",paste(top_5_barrios_entire_names,collapse = ", ")))
```

------------------------------------------------------------------------

13. ¿Cuales son los 5 barrios que tienen un mayor precio medio de alquiler para apartamentos enteros (es decir, del dataframe airbnb_entire)? ¿Cual es su precio medio?

Ayuda: Usa la función aggregate `aggregate(.~colname,df,mean,na.rm=TRUE)`

```{r}
## COMPLETO

head(airbnb_entire)

precio_medio_barrios <- aggregate(Precio ~ Barrio, airbnb_entire, mean, na.rm = TRUE)
top_5_precio_medio <- head(precio_medio_barrios[order(-precio_medio_barrios$Precio),], 5)

top_5_precio_medio

```

------------------------------------------------------------------------

14. ¿Cuantos apartamentos hay en cada uno de esos barrios?

Mostrar una dataframe con el nombre del barrio, el precio y el número de entradas.

Ayuda: Podeis crear un nuevo dataframe con las columnas "Barrio" y "Freq" que contenga el número de entradas en cada barrio y hacer un merge con el dataframe del punto anterior.

```{r}
## COMPLETO

num_entradas_por_barrio <- as.data.frame(table(airbnb_entire$Barrio))
colnames(num_entradas_por_barrio) <- c("Barrio", "Freq")

barrios_y_precios <- merge(num_entradas_por_barrio, precio_medio_barrios, by = "Barrio")
barrios_y_precios
```

------------------------------------------------------------------------

15. Partiendo del dataframe anterior, muestra los 5 barrios con mayor precio, pero que tengan más de 100 entradas de alquiler.

```{r}
## COMPLETO

barrios_con_mas_de_100_entradas <- barrios_y_precios[barrios_y_precios$Freq > 100, ]

top_5_barrios_precio_superior_100 <- head(barrios_con_mas_de_100_entradas[order(-barrios_con_mas_de_100_entradas$Precio),], 5)
top_5_barrios_precio_superior_100

```

------------------------------------------------------------------------

16. Dibuja el diagrama de densidad de distribución de los diferentes precios. Serían 5 gráficas, una por cada barrio.

```{r}
## COMPLETO

library(ggplot2)

for (barrio in unique(top_5_barrios_precio_superior_100$Barrio)) {
  datos_barrio <- airbnb_entire[airbnb_entire$Barrio == barrio, ]
  
  p <- ggplot(datos_barrio, aes(x = Precio)) +
    geom_density(fill = "green", color = "darkgreen") +
    ggtitle (paste("Distribución de precios en", barrio)) +
    xlab("Precio") +
    ylab("Densidad") +
    theme_bw()
  print(p)
  }
```

------------------------------------------------------------------------

17. Calcula el tamaño medio, en metros cuadrados, para los 5 barrios anteriores y muestralo en el mismo dataframe junto con el precio y número de entradas

```{r}
## COMPLETO

library(dplyr)

str(airbnb_entire)

tam_medio_barrios <- airbnb_entire %>%
  filter(Barrio %in% top_5_barrios_precio_superior_100$Barrio) %>%
  group_by(Barrio) %>%
  summarise(TamañoMedioM2 = mean(MetrosCuadrados, na.rm = TRUE))

barrios_y_precios_con_tam <- barrios_y_precios %>%
  filter(Barrio %in% top_5_barrios_precio_superior_100$Barrio) %>%
  left_join(tam_medio_barrios, by = c("Barrio" = "Barrio"))

barrios_y_precios_con_tam
```

------------------------------------------------------------------------

18. Dibuja el diagrama de densidad de distribución de los diferentes tamaños de apartamentos. Serían 5 gráficas, una por cada barrio.

```{r}
## COMPLETO

library(ggplot2)

for (barrio in unique(barrios_y_precios_con_tam$Barrio)) {
  datos_barrio <- airbnb_entire[airbnb_entire$Barrio == barrio, ]
  
  p <- ggplot(datos_barrio, aes(x = MetrosCuadrados)) +
    geom_density(fill = "yellow", color = "black") +
    ggtitle(paste("Distribución de tamaños de apartamentos en", barrio)) +
    xlab("Tamaño en pies cuadrados") +
    ylab("Densidad") +
    theme_dark()
  
    print(p)
}
```

------------------------------------------------------------------------

19. Esta claro que las medias de metros cuadrados de cada uno de estos 5 barrios parecen ser diferentes, pero ¿son estadísticamente diferentes? ¿Que test habría que usar para comprobarlo?

```{r}
## COMPLETO

shapiro_test <- barrios_y_precios_con_tam %>%
  summarise(shapiro_test = shapiro.test(TamañoMedioM2)$p.value)

shapiro_test

test_aplicacion <- if(all(shapiro_test < 0.05)){
  print(paste("ANOVA"))
} else {print(paste("Test de Kruskal"))
    }

print(paste("Según el resultado del test de shapiro:",paste(round(shapiro_test,2)),"se aplica", paste(test_aplicacion,collapse = ", ")))

if(all(shapiro_test < 0.05)) {
  kruskal_test <- kruskal.test(TamañoMedioM2 ~ Barrio, data = barrios_y_precios_con_tam)
  print(kruskal_test)
  
} else {
  anova_result <- aov(TamañoMedioM2 ~ Barrio, data = barrios_y_precios_con_tam)
  summary(anova_result)
}
```

------------------------------------------------------------------------

------------------------------------------------------------------------

Para únicamente los pisos de alquiler en el barrio de Sol:

`barrio_sol<-subset(airbnb_entire,Barrio=="Sol")`

Calcular un modelo lineal que combine alguna de estas variables: 
*NumBanyos 
* NumDormitorios 
* MaxOcupantes 
* MetrosCuadrados

20. Primero calculamos la correlación para ver como se relacionan estas variables entre sí.

```{r}
## COMPLETO

barrio_sol <- subset(airbnb_entire, Barrio == "Sol")
variables_interes <- barrio_sol[c("NumBanyos", "NumDormitorios", "MaxOcupantes", "MetrosCuadrados")]
correlacion_variables <- cor(variables_interes, use = "pairwise.complete.obs")
correlacion_variables

```

------------------------------------------------------------------------

21. Se observa que la correlación entre el número de dormitorios y los metros cuadrados es sorprendentemente baja. ¿Son de fiar esos números?

Mediante un histograma o curvas de densidad podemos descartar números que no tienen sentido en el dataframe barrio_sol, para tener una matriz de correlación que tenga mayor sentido.

```{r}
## COMPLETO

barrio_sol_sin_na <- na.omit(barrio_sol[c("NumDormitorios", "MetrosCuadrados")])

##Histogramas
hist(barrio_sol_sin_na$NumDormitorios, main = "Histograma de NumDormitorios", xlab = "NumDormitorios")
hist(barrio_sol_sin_na$MetrosCuadrados, main = "Histograma de MetrosCuadrados", xlab = "MetrosCuadrados")

##CurvasDensidad
plot(density(barrio_sol_sin_na$NumDormitorios), main = "Curva de densidad de NumDormitorios")
plot(density(barrio_sol_sin_na$MetrosCuadrados), main = "Curva de densidad de MetrosCuadrados")
```

------------------------------------------------------------------------

22. Una vez que hayamos filtrado los datos correspondientes calcular el valor o la combinación de valores que mejor nos permite obtener el precio de un inmueble.

¿Que variable es más fiable para conocer el precio de un inmueble, el número de habitaciones o los metros cuadrados?

```{r}
## COMPLETO

barrio_sol_sin_na <- na.omit(barrio_sol[c("Precio", "NumDormitorios", "MetrosCuadrados")])

#Por número de dormitorios
modelo_dormitorios <- lm(Precio ~ NumDormitorios, data = barrio_sol_sin_na)
summary(modelo_dormitorios)

#Por metros cuadrados
modelo_metros_cuadrados <- lm(Precio ~ MetrosCuadrados, data = barrio_sol_sin_na)
summary(modelo_metros_cuadrados)

if (summary(modelo_dormitorios)$r.squared > summary(modelo_metros_cuadrados)$r.squared) {
  respuesta <- "El modelo que explica mejor la variabilidad en el precio del inmueble es el que utiliza NumDormitorios."
} else {
  respuesta <- "El modelo que explica mejor la variabilidad en el precio del inmueble es el que utiliza MetrosCuadrados."
}

print(respuesta)

``` 

------------------------------------------------------------------------

23. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada metro cuadrado extra del piso?

```{r}
## COMPLETO

coeficiente_metros_cuadrados <- coef(modelo_metros_cuadrados)["MetrosCuadrados"]

intervalo_confianza <- confint(modelo_metros_cuadrados)["MetrosCuadrados",]

coeficiente_metros_cuadrados
intervalo_confianza

print(
  paste("Por cada metro cuadrado, el precio del alquiler se incrementa en:",
                         round(coeficiente_metros_cuadrados, 2),
                         "euros. Con un intervalo de confianza del 95%:",
                         "(entre", round(intervalo_confianza[1], 2),
                         "-", round(intervalo_confianza[2], 2), "euros)")
)

```

------------------------------------------------------------------------

24. Responde con su correspondiente margen de error del 95%, ¿cuantos euros incrementa el precio del alquiler por cada habitación?

```{r}
## COMPLETO

coeficiente_dormitorios <- coef(modelo_dormitorios)["NumDormitorios"]

intervalo_confianza_dormitorios <- confint(modelo_dormitorios)["NumDormitorios",]

coeficiente_dormitorios
intervalo_confianza_dormitorios

print(
  paste("Por cada habitación, el precio del alquiler se incrementa en:",
                         round(coeficiente_dormitorios, 2),
                         "euros. Con un intervalo de confianza del 95%:",
                         "(entre", round(intervalo_confianza_dormitorios[1], 2),
                         "-", round(intervalo_confianza_dormitorios[2], 2), "euros)")
)

```

------------------------------------------------------------------------

25. ¿Cual es la probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios? ¿Cual es el intervalo de confianza de esa probabilidad?

```{r}
## COMPLETO

#str(barrio_sol)

apartamentos_3_dormitorios <- subset(barrio_sol, TipoPropiedad == "Apartment" & NumDormitorios == 3)
total_apartamentos_3_dormitorios <- nrow(apartamentos_3_dormitorios)

total_apartamentos_sol <- nrow(subset(barrio_sol, TipoPropiedad == "Apartment"))

probabilidad_3_dormitorios <- total_apartamentos_3_dormitorios / total_apartamentos_sol

error_estandar_probabilidad <- sqrt(proporcion_3_dormitorios * (1 - proporcion_3_dormitorios) / total_apartamentos_sol)

intervalo_confianza_probabilidad <- qnorm(c(0.025, 0.975), mean = proporcion_3_dormitorios, sd = error_estandar_probabilidad)

probabilidad_3_dormitorios
intervalo_confianza_probabilidad

print(
paste("La probabilidad de encontrar, en el barrio de Sol, un apartamento en alquiler con 3 dormitorios es:", round(probabilidad_3_dormitorios, 2), "con un intervalo de confianza del 95% entre", round(intervalo_confianza_probabilidad[1], 4), "y", round(intervalo_confianza_probabilidad[2], 4))
)
```

------------------------------------------------------------------------
